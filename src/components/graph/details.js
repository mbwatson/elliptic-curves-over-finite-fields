import { Fragment, useCallback } from 'react'
import PropTypes from 'prop-types'
import { Stack } from 'rsuite'
import { Latex } from '../latex'
import { useConfig } from '../../context'
import { Torus } from './torus'
import './graph.css'

//

const Detail = ({ children, title }) => {
  return (
    <div className="detail">
      <div className="detail-title">
        <h6>{ title }</h6>
      </div>
      <div className="detail-body">
        { children }
      </div>
    </div>
  )
}

Detail.propTypes = {
  children: PropTypes.node,
  title: PropTypes.oneOfType([
    PropTypes.string,
    PropTypes.node,
  ]).isRequired,
}

//

export const Details = () => {
  const {
    discriminant, equationLatex, homogenizationLatex, generator, graph, modulus, params, subgroup,
   } = useConfig()

  const Solutions = useCallback(() => {
    return (
      <Detail title="Solutions">
        <Latex math={ equationLatex } /> has <Latex math={ `\\bold{${ graph.length + 1 }}` } /> solutions
        over <Latex math={ `\\mathbb{Z}_{${ modulus }}` } />.
      </Detail>
    )
  }, [equationLatex, graph, modulus])

  const Discriminant = useCallback(() => {
    return (
      <Detail title="Discriminant">
        <Latex math={
          `\\Delta
            = -16(4A^3 + 27B^2)
            = -16(4\\cdot${ params.a } + 27\\cdot${ params.b }^2)
            = \\bold{${ discriminant }}.`
        } />
      </Detail>
    )
  }, [discriminant, params.a, params.b])

  const SubgroupList = useCallback(() => {
    if (!generator) {
      return (
        <Detail title="Subgroup">
          <p>Select a generator.</p>
        </Detail>
      )
    }

    return (
      <Detail title={ <span>Subgroup generated by <Latex math={ `g = (${ generator.x }, ${ generator.y })` } /></span> }>
        <p>
          Order: <Latex math={ `\\vert g \\vert = ${ subgroup.length + 1 }` } />
        </p>
        <p>
          Subgroup: 
        <Latex math={ `\\langle g \\rangle = ` } />
        {' '}&#123;{' '}{
          subgroup.map(g => (
            <Fragment key={ `sg-item-${ JSON.stringify(g) }` }>
              <Latex math={ `(${ g.x }, ${ g.y })` } /><span>,{' '}</span>
            </Fragment>
          ))
        }<Latex math="\mathcal{O}" />{' '}&#125;
        </p>
      </Detail>
    )
  }, [subgroup])

  const Homogenization = useCallback(() => {
    return (
      <Detail title="Homogenization">
        <Latex math={ homogenizationLatex } /> defines a curve in the projective plane.
      </Detail>
    )
  }, [homogenizationLatex])

  return (
    <Stack
      direction="column"
      alignItems="stretch"
      className="details"
      spacing={ 16 }
    >
      <Solutions />

      <Discriminant />

      <SubgroupList />

      <Homogenization />

      <Torus majorSegments={ modulus } minorSegments={ modulus } />

    </Stack>
  )
}
